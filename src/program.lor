#profile potados.jsonc

#global CORE0 CORE0 0 0 

#define STACK_BASE 0x0100 

#data STACK_BASE "BDCEFABCDEFGCAF"

CORE0:
    mov reg[SP], STACK_BASE      // stack init
    mov reg[2], reg[SP]          // array start 
    add reg[SP], reg[SP], 0x0010 // add 16 elements 
    mov reg[3], reg[SP]          // array end 
    dec reg[3]                   // last element (15)
    
    #debug ram
    
    call QUICK_SORT

    int 0
    #debug ram
    #debug break


QUICK_SORT:
    // reg[2] - ptr low   
    // reg[3] - ptr high  (last element)
    jge reg[2], reg[3], END

        // INLINED PARTION ALGORTIM `

        // PARTITION:
        // reg[1] caller - output, pivot
        // reg[2] callee - param,  ptr low
        // reg[3] callee - param,  ptr high
        mov reg[4], ram[reg[3]] // pivot = S[high]
        sub reg[5], reg[2], 1   // i = low - 1

        mov reg[1], reg[2]      // j = low

        PARTITION_LOOP:
            mov reg[6], ram[reg[1]] // S[j] 
            jg reg[6], reg[4], SKIP_SWAP // if(S[j] <= pivot)
                inc reg[5]
                mov reg[9], ram[reg[5]]  // S[i]
                
                //swap(S[i], S[j]); S[j] - reg[6], s[i] - reg[9]
                mov ram[reg[5]], reg[6]
                mov ram[reg[1]], reg[9]
            SKIP_SWAP:
            jne reg[1]++, reg[3], PARTITION_LOOP

            //swap(S[i+1], S[high]); i+1
            inc reg[5] // i = i+1 
            mov reg[9], ram[reg[5]] // S[i+1]

            // S[high] = pivot = reg[4] (high = reg[3])
            // S[i+1] =          reg[9] (i+1  = reg[5])
            mov ram[reg[5]], reg[4] 
            mov ram[reg[3]], reg[9]
        // ret
        
        // END OF INLINED PARTION ALGORTIM 

        // quickSort(S, low, pivot - 1);

        push reg[5]           // save pivot
        push reg[3]           // save ptr high
        sub reg[3], reg[5], 1 // pivot - 1 
        
        call QUICK_SORT

        pop reg[3]            // restore ptr high
        pop reg[2]            // restore pivot
        add reg[2], reg[2], 1
        
        // quickSort(S, pivot + 1, high);

        call QUICK_SORT
    END:
    ret

