{
    "CPU":{
        "Name": "ZCore 8bit",
        "Architecture": "ZCore",
        "Author": "Zbagier",
        "emulator":"zcore_emulator",
        
        "ARGUMENTS":{
            "Arg":{
                "size":8
            },
            "Warunek":{
                "size":5
            },
            "NegAlu":{
                "size":1
            },
            "opALU":{
                "size":4
            },
            "readA":{
                "size":3
            },
            "readB":{
                "size":3
            },
            "write":{
                "size":3
            },
            "opCPU":{
                "size":5
            },
            "opFlow":{
                
            },
            "Interupt":{
                "size":4
            },
            "Adress":{
                "size":8
            }
        },

        "DEFINES":[
            "__ZCORE__"
        ],

        "parametrs":{
            "word len":8,
            "max value": 255,
            "num of regs":7,

            "ram adress space":{
                "min":0,
                "max":255
            },
            "rom adress space":{
                "min":0,
                "max":255
            },
            "rom stack size":16,
            "cpu stack size":16,
            "cores":2,
            "arguments sizes":{
                "const":255,
                "reg":7,
                "ram":255,
                "ptr":7,
                "adress":255
            },
            "SUPPORTED TECHNOLOGIES":[
                "",
                ""
            ]
        },
        "COMMANDS":{
            "mov const reg":{
                "name":"mov",
                "type":"mov",
                "subtype":"mov",
                "emulator":"mov_const_reg",
                "description":"Write const to register",
                "example":"mov {}, reg[{}]",

                "numofargs":2,
                "args":[
                    {
                        "type":"const",
                        "name":"value"
                    },
                    {
                        "type":"reg",
                        "name":"to"
                    }
                ],
                "bin":{
                    "arg":"value",
                    "write":"reg",
                    "opCPU":1
                }
            },
            "mov reg reg":{
                "name":"mov",
                "type":"mov",
                "subtype":"mov",
                "emulator":"mov_reg_reg",
                "description":"Copy register to register",
                "example":"mov reg[{}], reg[{}]",

                "numofargs":2,
                "args":[
                    {
                        "type":"reg",
                        "description":"from"
                    },
                    {
                        "type":"reg",
                        "description":"to"
                    }
                ],
                "bin":{
                    "readA":"from",
                    "write":"to",
                    "opCPU":2,
                    "opALU":6
                }
            },
            "mov reg ptr":{
                "name":"mov",
                "type":"mov",
                "subtype":"mov",
                "emulator":"write_pointer_reg",
                "description":"Copy register to pointer",
                "example":"mov reg[{}], ram[reg[{}]]",

                "numofargs":2,
                "args":[
                    {
                        "type":"reg",
                        "description":"from"
                    },
                    {
                        "type":"ptr",
                        "description":"ptr"
                    }
                ],
                "parent":"write reg reg"
            },
            "write reg reg":{
                "name":"write",
                "type":"mov",
                "subtype":"mov",
                "emulator":"write_pointer_reg",
                "description":"Copy register to pointer",
                "example":"write reg[{}], reg[{}]",

                "numofargs":2,
                "args":[
                    {
                        "type":"reg",
                        "description":"from"
                    },
                    {
                        "type":"reg",
                        "description":"ptr"
                    }
                ]
            },
            "mov ptr reg":{
                "name":"mov",
                "type":"mov",
                "subtype":"mov",
                "emulator":"read_reg_pointer",
                "description":"Set register to pointer value",
                "example":"mov ram[reg[{}]], reg[{}]",

                "numofargs":2,
                "args":[
                    {
                        "type":"ptr",
                        "description":"ptr to read"
                    },
                    {
                        "type":"reg",
                        "description":"to"
                    }
                ],
                "parent":"read reg reg"
            },
            "read reg reg":{
                "name":"read",
                "type":"mov",
                "subtype":"mov",
                "emulator":"read_reg_pointer",
                "description":"Set register to pointer value",
                "example":"read reg[{}], reg[{}]",

                "numofargs":2,
                "args":[
                    {
                        "type":"reg",
                        "description":"ptr to read"
                    },
                    {
                        "type":"reg",
                        "description":"to"
                    }
                ]
            },
            "write const reg":{
                "name":"write",
                "type":"mov",
                "subtype":"mov",
                "emulator":"write_const_pointer",
                "description":"Set pointer to value",
                "example":"write {}, reg[{}]",

                "numofargs":2,
                "args":[
                    {
                        "type":"const",
                        "description":"value"
                    },
                    {
                        "type":"reg",
                        "description":"ptr to write"
                    }
                ]
            },
            "mov const ptr":{
                "name":"mov",
                "type":"mov",
                "subtype":"mov",
                "emulator":"write_const_pointer",
                "description":"Set pointer to value",
                "example":"mov {}, ram[reg[{}]]",

                "numofargs":2,
                "args":[
                    {
                        "type":"const",
                        "description":"value"
                    },
                    {
                        "type":"ptr",
                        "description":"ptr to write"
                    }
                ],
                "parent":"write const reg"
            },
            "read const reg":{
                "name":"read",
                "type":"mov",
                "subtype":"mov",
                "emulator":"read_ram_reg",
                "description":"read adress to register",
                "example":"read {}, reg[{}}]",

                "numofargs":2,
                "args":[
                    {
                        "type":"const",
                        "description":"value"
                    },
                    {
                        "type":"reg",
                        "description":"ptr to write"
                    }
                ]
            },
            "mov ram reg":{
                "name":"mov",
                "type":"mov",
                "subtype":"mov",
                "emulator":"read_ram_reg",
                "description":"read adress to register",
                "example":"mov ram[{}], reg[{}]",

                "numofargs":2,
                "args":[
                    {
                        "type":"ram",
                        "description":"ram adress to read"
                    },
                    {
                        "type":"reg",
                        "description":"ptr to write"
                    }
                ],
                "parent":"read const reg"
            },
            "write reg const":{
                "name":"write",
                "type":"mov",
                "subtype":"mov",
                "emulator":"write_reg_ram",
                "description":"Set ram cell to register",
                "example":"write reg[{}], y",
                "numofargs":2,
                "args":[
                    {
                        "type":"reg",
                        "description":"register to read"
                    },
                    {
                        "type":"const",
                        "description":"adress to write"
                    }
                ]
            },
            "mov reg ram":{
                "name":"mov",
                "type":"mov",
                "subtype":"mov",
                "emulator":"write_reg_ram",
                "description":"Set ram cell to register",
                "example":"mov reg[{}], ram[{}]",

                "numofargs":2,
                "args":[
                    {
                        "type":"reg",
                        "description":"register to read"
                    },
                    {
                        "type":"ram",
                        "description":"adress to write"
                    }
                ],
                "parent":"write reg const"
            },
            "write const const":{
                "name":"write",
                "type":"mov",
                "subtype":"mov",
                "emulator":"write_const_ram",
                "description":"Set ram cell to value",
                "example":"write {}, {}",

                "numofargs":2,
                "args":[
                    {
                        "type":"const",
                        "description":"value to write"
                    },
                    {
                        "type":"const",
                        "description":"adress to write"
                    }
                ]
            },
            "mov const ram":{
                "name":"mov",
                "type":"mov",
                "subtype":"mov",
                "emulator":"write_const_ram",
                "description":"Set ram cell to value",
                "example":"mov {}, ram[{}]",

                "numofargs":2,
                "args":[
                    {
                        "type":"const",
                        "description":"value to write"
                    },
                    {
                        "type":"ram",
                        "description":"adress to write"
                    }
                ],
                "parent":"write const const"
            },

            "or const reg":{
                "name":"or",
                "type":"alu",
                "subtype":"alu_long",
                "emulator":"alu_const_reg_or",
                "description":"Set reg[z] to value x | reg[y]",
                "example":"or {}, reg[{}], reg[{}]",

                "numofargs":3,
                "args":[
                    {
                        "type":"const",
                        "description":"value a"
                    },
                    {
                        "type":"reg",
                        "description":"argument b"
                    },
                    {
                        "type":"reg",
                        "description":"register to write output"
                    }
                ]
            },
            "or reg reg":{
                "name":"or",
                "type":"alu",
                "subtype":"alu_long",
                "emulator":"alu_reg_reg_or",
                "description":"Set reg[z] to value reg[x] | reg[y]",
                "example":"or {}, reg[{}], reg[{}]",

                "numofargs":3,
                "args":[
                    {
                        "type":"reg",
                        "description":"argument a"
                    },
                    {
                        "type":"reg",
                        "description":"argument b"
                    },
                    {
                        "type":"reg",
                        "description":"register to write output"
                    }
                ]
            },
            
            "inc reg":{
                "name":"inc",
                "type":"alu",
                "subtype":"alu_short",
                "emulator":"alu_const_reg_inc",
                "description":"Add one to register",
                "example":"inc reg[{}]",
                "arguments pass":[
                    {"const":0},
                    {"arg":0},
                    {"arg":0}
                ],

                "numofargs":1,
                "args":[
                    {
                        "type":"reg",
                        "description":"register to increment"
                    }
                ]
            },
            "dec reg":{
                "name":"dec",
                "type":"alu",
                "subtype":"alu_short",
                "emulator":"alu_const_reg_dec",
                "description":"Add one to register",
                "example":"dec reg[{}]",
                "arguments pass":[
                    {"const":0},
                    {"arg":0},
                    {"arg":0}
                ],

                "numofargs":1,
                "args":[
                    {
                        "type":"reg",
                        "description":"register to decrement"
                    }
                ]
            },
            
            "add const reg":{
                "name":"add",
                "type":"alu",
                "subtype":"alu_long",
                "emulator":"alu_const_reg_add",
                "description":"Set reg[z] to value x + reg[y]",
                "example":"add {}, reg[{}], reg[{}]",

                "numofargs":3,
                "args":[
                    {
                        "type":"const",
                        "description":"value a"
                    },
                    {
                        "type":"reg",
                        "description":"argument b"
                    },
                    {
                        "type":"reg",
                        "description":"register to write output"
                    }
                ]
            },
            "add reg reg":{
                "name":"add",
                "type":"alu",
                "subtype":"alu_long",
                "emulator":"alu_reg_reg_add",
                "description":"Set reg[z] to value reg[x] + reg[y]",
                "example":"add {}, reg[{}], reg[{}]",

                "numofargs":3,
                "args":[
                    {
                        "type":"reg",
                        "description":"argument a"
                    },
                    {
                        "type":"reg",
                        "description":"argument b"
                    },
                    {
                        "type":"reg",
                        "description":"register to write output"
                    }
                ]
            },
            
            "sub const reg":{
                "name":"sub",
                "type":"alu",
                "subtype":"alu_long",
                "emulator":"alu_const_reg_sub",
                "description":"Set reg[z] to value x - reg[y]",
                "example":"sub {}, reg[{}], reg[{}]",

                "numofargs":3,
                "args":[
                    {
                        "type":"const",
                        "description":"value a"
                    },
                    {
                        "type":"reg",
                        "description":"argument b"
                    },
                    {
                        "type":"reg",
                        "description":"register to write output"
                    }
                ]
            },
            "sub reg reg":{
                "name":"sub",
                "type":"alu",
                "subtype":"alu_long",
                "emulator":"alu_reg_reg_sub",
                "description":"Set reg[z] to value reg[x] + reg[y]",
                "example":"sub {}, reg[{}], reg[{}]",

                "numofargs":3,
                "args":[
                    {
                        "type":"reg",
                        "description":"argument a"
                    },
                    {
                        "type":"reg",
                        "description":"argument b"
                    },
                    {
                        "type":"reg",
                        "description":"register to write output"
                    }
                ]
            },
            

            "not reg":{
                "name":"not",
                "type":"alu",
                "subtype":"alu_short",
                "emulator":"alu_const_reg_not",
                "description":"Set reg[z] to value !reg[y]",
                "example":"inc reg[{}]",
                "arguments pass":[
                    {"const":0},
                    {"arg":0},
                    {"arg":0}
                ],

                "numofargs":1,
                "args":[
                    {
                        "type":"reg",
                        "description":"register to negate"
                    }
                ]
            },

            "uncond jump":{
                "name":"jmp",
                "type":"JUMP",
                "subtype":"jump_uncond",
                "emulator":"jump",

                "description":"Jump to adress",
                "example":"jump {}",

                "numofargs":1,
                "args":[
                    {
                        "type":"adress",
                        "description":"rom adress to jump"
                    }
                ]
            },
            "uncond call":{
                "name":"call",
                "type":"CALL",
                "subtype":"call_uncond",
                "emulator":"call",

                "description":"call adress",
                "example":"call {}",

                "numofargs":1,
                "args":[
                    {
                        "type":"adress",
                        "description":"rom adress to call"
                    }
                ]
            },

            "jump equal const":{
                "name":"je",
                "type":"JUMP",
                "subtype":"jump_cond",
                "emulator":"jump_equal_const_reg",

                "description":"Jump to adress if value is equal to register",
                "example":"je {}, reg[{}], {}",

                "numofargs":3,
                "args":[
                    {
                        "type":"const",
                        "description":"value a"
                    },
                    {
                        "type":"reg",
                        "description":"register b"
                    },
                    {
                        "type":"adress",
                        "description":"rom adress to jump if condition is satisfiet"
                    }
                ]
            },
            "jump equal reg":{
                "name":"je",
                "type":"JUMP",
                "subtype":"jump_cond",
                "emulator":"jump_equal_reg_reg",

                "description":"Jump to adress if register is equal to other register",
                "example":"je reg[{}], reg[{}], {}",

                "numofargs":3,
                "args":[
                    {
                        "type":"reg",
                        "description":"register a"
                    },
                    {
                        "type":"reg",
                        "description":"register b"
                    },
                    {
                        "type":"adress",
                        "description":"rom adress to jump if condition is satisfiet"
                    }
                ]
            },

            "jump not equal const":{
                "name":"jne",
                "type":"JUMP",
                "subtype":"jump_cond",
                "emulator":"jump_not_equal_const_reg",

                "description":"Jump to adress if value is not equal to register",
                "example":"jne {}, reg[{}], {}",

                "numofargs":3,
                "args":[
                    {
                        "type":"const",
                        "description":"value a"
                    },
                    {
                        "type":"reg",
                        "description":"register b"
                    },
                    {
                        "type":"adress",
                        "description":"rom adress to jump if condition is satisfiet"
                    }
                ]
            },
            "jump not equal reg":{
                "name":"jne",
                "type":"JUMP",
                "subtype":"jump_cond",
                "emulator":"jump_not_equal_reg_reg",

                "description":"Jump to adress if register is not equal to other register",
                "example":"jne reg[{}], reg[{}], {}",

                "numofargs":3,
                "args":[
                    {
                        "type":"reg",
                        "description":"register a"
                    },
                    {
                        "type":"reg",
                        "description":"register b"
                    },
                    {
                        "type":"adress",
                        "description":"rom adress to jump if condition is satisfiet"
                    }
                ]
            }

        },
        "PATTERNS":[
            {},
            {}
        ]
    }
}