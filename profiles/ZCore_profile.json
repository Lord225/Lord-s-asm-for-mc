{
    "CPU":{
        "Name": "ZCore 8bit",
        "Architecture": "ZCore",
        "Author": "Zbagier",
        "emulator":"zcore_emulator",
        
        "ARGUMENTS":{
            "Arg":{
                "size":8
            },
            "Warunek":{
                "size":5
            },
            "NegAlu":{
                "size":1
            },
            "opALU":{
                "size":4
            },
            "readA":{
                "size":3
            },
            "readB":{
                "size":3
            },
            "write":{
                "size":3
            },
            "opCPU":{
                "size":5
            },
            "opFlow":{
                
            },
            "Interupt":{
                "size":4
            },
            "Adress":{
                "size":8
            }
        },

        "DEFINES":[
            "__ZCORE__"
        ],
        "KEYWORDS":[
            "CORE0"
        ],
        "CUSTOM ARGUMENTS":{
        },
        "parametrs":{
            "word len":8,
            "num of regs":7,

            "ram adress space":{
                "min":0,
                "max":255
            },
            "rom adress space":{
                "min":0,
                "max":255
            },
            "cores":2,
            "arguments sizes":{
                "const":255,
                "reg":7,
                "ram":255,
                "ptr":7,
                "adress":255
            },
            "SUPPORTED TECHNOLOGIES":[
                "",
                ""
            ]
        },
        "COMMANDS":{
            "mov const reg":{
                "name":"mov",
                "type":"mov",
                "subtype":"mov",
                "emulator":"mov_const_reg",
                "description":"Write const to register",
                "example":"mov {}, reg[{}]",

                "args":[
                    {
                        "type":"const",
                        "name":"value"
                    },
                    {
                        "type":"reg",
                        "name":"to"
                    }
                ],
                "bin":{
                    "arg":"value",
                    "write":"to",
                    "opCPU":1
                }
            },
            "mov reg reg":{
                "name":"mov",
                "type":"mov",
                "subtype":"mov",
                "emulator":"mov_reg_reg",
                "description":"Copy register to register",
                "example":"mov reg[{}], reg[{}]",

                "args":[
                    {
                        "type":"reg",
                        "name":"from"
                    },
                    {
                        "type":"reg",
                        "name":"to"
                    }
                ],
                "bin":{
                    "readA":"from",
                    "write":"to",
                    "opCPU":2,
                    "opALU":6
                }
            },
            "mov reg ptr":{
                "name":"mov",
                "type":"mov",
                "subtype":"mov",
                "emulator":"write_pointer_reg",
                "description":"Copy register to pointer",
                "example":"mov reg[{}], ram[reg[{}]]",

                "args":[
                    {
                        "type":"reg",
                        "name":"from"
                    },
                    {
                        "type":"ptr",
                        "name":"ptr"
                    }
                ],
                "parent":"write reg reg"
            },
            "write reg reg":{
                "name":"write",
                "type":"mov",
                "subtype":"mov",
                "emulator":"write_pointer_reg",
                "description":"Copy register to pointer",
                "example":"write reg[{}], reg[{}]",

                "args":[
                    {
                        "type":"reg",
                        "name":"from"
                    },
                    {
                        "type":"reg",
                        "name":"ptr"
                    }
                ]
            },
            "mov ptr reg":{
                "name":"mov",
                "type":"mov",
                "subtype":"mov",
                "emulator":"read_reg_pointer",
                "description":"Set register to pointer value",
                "example":"mov ram[reg[{}]], reg[{}]",

                "args":[
                    {
                        "type":"ptr",
                        "name":"ptr to read"
                    },
                    {
                        "type":"reg",
                        "name":"to"
                    }
                ],
                "parent":"read reg reg"
            },
            "read reg reg":{
                "name":"read",
                "type":"mov",
                "subtype":"mov",
                "emulator":"read_reg_pointer",
                "description":"Set register to pointer value",
                "example":"read reg[{}], reg[{}]",

                "args":[
                    {
                        "type":"reg",
                        "name":"ptr to read"
                    },
                    {
                        "type":"reg",
                        "name":"to"
                    }
                ]
            },
            "write const reg":{
                "name":"write",
                "type":"mov",
                "subtype":"mov",
                "emulator":"write_const_pointer",
                "description":"Set pointer to value",
                "example":"write {}, reg[{}]",

                "args":[
                    {
                        "type":"const",
                        "name":"value"
                    },
                    {
                        "type":"reg",
                        "name":"ptr to write"
                    }
                ]
            },
            "mov const ptr":{
                "name":"mov",
                "type":"mov",
                "subtype":"mov",
                "emulator":"write_const_pointer",
                "description":"Set pointer to value",
                "example":"mov {}, ram[reg[{}]]",

                "args":[
                    {
                        "type":"const",
                        "name":"value"
                    },
                    {
                        "type":"ptr",
                        "name":"ptr to write"
                    }
                ],
                "parent":"write const reg"
            },
            "read const reg":{
                "name":"read",
                "type":"mov",
                "subtype":"mov",
                "emulator":"read_ram_reg",
                "description":"read adress to register",
                "example":"read {}, reg[{}}]",

                "args":[
                    {
                        "type":"const",
                        "name":"value"
                    },
                    {
                        "type":"reg",
                        "name":"ptr to write"
                    }
                ]
            },
            "mov ram reg":{
                "name":"mov",
                "emulator":"read_ram_reg",
                "description":"read adress to register",
                "example":"mov ram[{}], reg[{}]",

                "args":[
                    {
                        "type":"ram",
                        "name":"ram adress to read"
                    },
                    {
                        "type":"reg",
                        "name":"ptr to write"
                    }
                ],
                "parent":"read const reg"
            },
            "write reg const":{
                "name":"write",
                "type":"mov",
                "subtype":"mov",
                "emulator":"write_reg_ram",
                "description":"Set ram cell to register",
                "example":"write reg[{}], y",

                "args":[
                    {
                        "type":"reg",
                        "name":"register to read"
                    },
                    {
                        "type":"const",
                        "name":"adress to write"
                    }
                ]
            },
            "mov reg ram":{
                "name":"mov",
                "type":"mov",
                "subtype":"mov",
                "emulator":"write_reg_ram",
                "description":"Set ram cell to register",
                "example":"mov reg[{}], ram[{}]",

                "args":[
                    {
                        "type":"reg",
                        "name":"register to read"
                    },
                    {
                        "type":"ram",
                        "name":"adress to write"
                    }
                ],
                "parent":"write reg const"
            },
            "write const const":{
                "name":"write",
                "type":"mov",
                "subtype":"mov",
                "emulator":"write_const_ram",
                "description":"Set ram cell to value",
                "example":"write {}, {}",

                "args":[
                    {
                        "type":"const",
                        "name":"value to write"
                    },
                    {
                        "type":"const",
                        "name":"adress to write"
                    }
                ]
            },
            "mov const ram":{
                "name":"mov",
                "type":"mov",
                "subtype":"mov",
                "emulator":"write_const_ram",
                "description":"Set ram cell to value",
                "example":"mov {}, ram[{}]",

                "args":[
                    {
                        "type":"const",
                        "name":"value to write"
                    },
                    {
                        "type":"ram",
                        "name":"adress to write"
                    }
                ],
                "parent":"write const const"
            },

            "or const reg":{
                "name":"or",
                "type":"alu",
                "subtype":"alu_long",
                "emulator":"alu_const_reg_or",
                "description":"Set reg[z] to value x | reg[y]",
                "example":"or {}, reg[{}], reg[{}]",

                "args":[
                    {
                        "type":"const",
                        "name":"value a"
                    },
                    {
                        "type":"reg",
                        "name":"argument b"
                    },
                    {
                        "type":"reg",
                        "name":"register to write output"
                    }
                ]
            },
            "or reg reg":{
                "name":"or",
                "type":"alu",
                "subtype":"alu_long",
                "emulator":"alu_reg_reg_or",
                "description":"Set reg[z] to value reg[x] | reg[y]",
                "example":"or {}, reg[{}], reg[{}]",

                "args":[
                    {
                        "type":"reg",
                        "name":"argument a"
                    },
                    {
                        "type":"reg",
                        "name":"argument b"
                    },
                    {
                        "type":"reg",
                        "name":"register to write output"
                    }
                ]
            },
            "and const reg":{
                "name":"and",
                "type":"alu",
                "subtype":"alu_long",
                "emulator":"alu_const_reg_and",
                "description":"Set reg[z] to value x | reg[y]",
                "example":"and {}, reg[{}], reg[{}]",

                "args":[
                    {
                        "type":"const",
                        "name":"value a"
                    },
                    {
                        "type":"reg",
                        "name":"argument b"
                    },
                    {
                        "type":"reg",
                        "name":"register to write output"
                    }
                ]
            },
            "and reg reg":{
                "name":"and",
                "type":"alu",
                "subtype":"alu_long",
                "emulator":"alu_reg_reg_and",
                "description":"Set reg[z] to value reg[x] | reg[y]",
                "example":"and {}, reg[{}], reg[{}]",

                "args":[
                    {
                        "type":"reg",
                        "name":"argument a"
                    },
                    {
                        "type":"reg",
                        "name":"argument b"
                    },
                    {
                        "type":"reg",
                        "name":"register to write output"
                    }
                ]
            },
            "xor const reg":{
                "name":"xor",
                "type":"alu",
                "subtype":"alu_long",
                "emulator":"alu_const_reg_xor",
                "description":"Set reg[z] to value x | reg[y]",
                "example":"xor {}, reg[{}], reg[{}]",

                "args":[
                    {
                        "type":"const",
                        "name":"value a"
                    },
                    {
                        "type":"reg",
                        "name":"argument b"
                    },
                    {
                        "type":"reg",
                        "name":"register to write output"
                    }
                ]
            },
            "xor reg reg":{
                "name":"xor",
                "type":"alu",
                "subtype":"alu_long",
                "emulator":"alu_reg_reg_xor",
                "description":"Set reg[z] to value reg[x] | reg[y]",
                "example":"xor {}, reg[{}], reg[{}]",

                "args":[
                    {
                        "type":"reg",
                        "name":"argument a"
                    },
                    {
                        "type":"reg",
                        "name":"argument b"
                    },
                    {
                        "type":"reg",
                        "name":"register to write output"
                    }
                ]
            },
            
            
            "inc reg":{
                "name":"inc",
                "type":"alu",
                "subtype":"alu_short",
                "emulator":"alu_const_reg_inc",
                "description":"Add one to register",
                "example":"inc reg[{}]",

                "args":[
                    {
                        "type":"reg",
                        "name":"register to increment"
                    }
                ]
            },
            "dec reg":{
                "name":"dec",
                "type":"alu",
                "subtype":"alu_short",
                "emulator":"alu_const_reg_dec",
                "description":"Add one to register",
                "example":"dec reg[{}]",

                "numofargs":1,
                "args":[
                    {
                        "type":"reg",
                        "name":"register to decrement"
                    }
                ]
            },
            
            "add const reg":{
                "name":"add",
                "type":"alu",
                "subtype":"alu_long",
                "emulator":"alu_const_reg_add",
                "description":"Set reg[z] to value x + reg[y]",
                "example":"add {}, reg[{}], reg[{}]",

                "args":[
                    {
                        "type":"const",
                        "name":"value a"
                    },
                    {
                        "type":"reg",
                        "name":"argument b"
                    },
                    {
                        "type":"reg",
                        "name":"register to write output"
                    }
                ]
            },
            "add reg reg":{
                "name":"add",
                "type":"alu",
                "subtype":"alu_long",
                "emulator":"alu_reg_reg_add",
                "description":"Set reg[z] to value reg[x] + reg[y]",
                "example":"add {}, reg[{}], reg[{}]",

                "args":[
                    {
                        "type":"reg",
                        "name":"argument a"
                    },
                    {
                        "type":"reg",
                        "name":"argument b"
                    },
                    {
                        "type":"reg",
                        "name":"register to write output"
                    }
                ]
            },
            
            "sub const reg":{
                "name":"sub",
                "type":"alu",
                "subtype":"alu_long",
                "emulator":"alu_const_reg_sub",
                "description":"Set reg[z] to value x - reg[y]",
                "example":"sub {}, reg[{}], reg[{}]",

                "args":[
                    {
                        "type":"const",
                        "name":"value a"
                    },
                    {
                        "type":"reg",
                        "name":"argument b"
                    },
                    {
                        "type":"reg",
                        "name":"register to write output"
                    }
                ]
            },
            "sub reg reg":{
                "name":"sub",
                "type":"alu",
                "subtype":"alu_long",
                "emulator":"alu_reg_reg_sub",
                "description":"Set reg[z] to value reg[x] + reg[y]",
                "example":"sub {}, reg[{}], reg[{}]",

                "args":[
                    {
                        "type":"reg",
                        "name":"argument a"
                    },
                    {
                        "type":"reg",
                        "name":"argument b"
                    },
                    {
                        "type":"reg",
                        "name":"register to write output"
                    }
                ]
            },
            "rsub const reg":{
                "name":"rsub",
                "type":"alu",
                "subtype":"alu_long",
                "emulator":"alu_const_reg_rsub",
                "description":"Set reg[z] to value x - reg[y]",
                "example":"sub {}, reg[{}], reg[{}]",

                "args":[
                    {
                        "type":"const",
                        "name":"value a"
                    },
                    {
                        "type":"reg",
                        "name":"argument b"
                    },
                    {
                        "type":"reg",
                        "name":"register to write output"
                    }
                ]
            },
            "rsub reg reg":{
                "name":"rsub",
                "type":"alu",
                "subtype":"alu_long",
                "emulator":"alu_reg_reg_rsub",
                "description":"Set reg[z] to value reg[x] + reg[y]",
                "example":"sub {}, reg[{}], reg[{}]",

                "args":[
                    {
                        "type":"reg",
                        "name":"argument a"
                    },
                    {
                        "type":"reg",
                        "name":"argument b"
                    },
                    {
                        "type":"reg",
                        "name":"register to write output"
                    }
                ]
            },

            "rsh const reg":{
                "name":"rsh",
                "type":"alu",
                "subtype":"alu_long",
                "emulator":"alu_const_reg_rsh",
                "description":"Set reg[z] to value x - reg[y]",
                "example":"rsh {}, reg[{}], reg[{}]",

                "args":[
                    {
                        "type":"const",
                        "name":"value a"
                    },
                    {
                        "type":"reg",
                        "name":"argument b"
                    },
                    {
                        "type":"reg",
                        "name":"register to write output"
                    }
                ]
            },
            "rsh reg reg":{
                "name":"rsh",
                "type":"alu",
                "subtype":"alu_long",
                "emulator":"alu_reg_reg_rsh",
                "description":"Set reg[z] to value reg[x] + reg[y]",
                "example":"rsh {}, reg[{}], reg[{}]",

                "args":[
                    {
                        "type":"reg",
                        "name":"argument a"
                    },
                    {
                        "type":"reg",
                        "name":"argument b"
                    },
                    {
                        "type":"reg",
                        "name":"register to write output"
                    }
                ]
            },
            "lsh const reg":{
                "name":"lsh",
                "type":"alu",
                "subtype":"alu_long",
                "emulator":"alu_const_reg_lsh",
                "description":"Set reg[z] to value x - reg[y]",
                "example":"lsh {}, reg[{}], reg[{}]",

                "args":[
                    {
                        "type":"const",
                        "name":"value a"
                    },
                    {
                        "type":"reg",
                        "name":"argument b"
                    },
                    {
                        "type":"reg",
                        "name":"register to write output"
                    }
                ]
            },
            "lsh reg reg":{
                "name":"lsh",
                "type":"alu",
                "subtype":"alu_long",
                "emulator":"alu_reg_reg_lsh",
                "description":"Set reg[z] to value reg[x] + reg[y]",
                "example":"lsh {}, reg[{}], reg[{}]",

                "args":[
                    {
                        "type":"reg",
                        "name":"argument a"
                    },
                    {
                        "type":"reg",
                        "name":"argument b"
                    },
                    {
                        "type":"reg",
                        "name":"register to write output"
                    }
                ]
            },
            
            "not reg":{
                "name":"not",
                "type":"alu",
                "subtype":"alu_short",
                "emulator":"alu_const_reg_not",
                "description":"Set reg[z] to value !reg[y]",
                "example":"inc reg[{}]",

                "args":[
                    {
                        "type":"reg",
                        "name":"register to negate"
                    }
                ]
            },

            "uncond jump":{
                "name":"jmp",
                "type":"JUMP",
                "subtype":"jump_uncond",
                "emulator":"jump",

                "description":"Jump to adress",
                "example":"jump {}",

                "args":[
                    {
                        "type":"adress",
                        "name":"rom adress to jump"
                    }
                ]
            },
            "uncond call":{
                "name":"call",
                "type":"CALL",
                "subtype":"call_uncond",
                "emulator":"call",

                "description":"call adress",
                "example":"call {}",

                "args":[
                    {
                        "type":"adress",
                        "name":"rom adress to call"
                    }
                ]
            },

            "jump equal const":{
                "name":"je",
                "type":"JUMP",
                "subtype":"jump_cond",
                "emulator":"jump_equal_const_reg",

                "description":"Jump to adress if value is equal to register",
                "example":"je {}, reg[{}], {}",

                "args":[
                    {
                        "type":"const",
                        "name":"value a"
                    },
                    {
                        "type":"reg",
                        "name":"register b"
                    },
                    {
                        "type":"adress",
                        "name":"rom adress to jump if condition is satisfiet"
                    }
                ]
            },
            "jump equal reg":{
                "name":"je",
                "type":"JUMP",
                "subtype":"jump_cond",
                "emulator":"jump_equal_reg_reg",

                "description":"Jump to adress if register is equal to other register",
                "example":"je reg[{}], reg[{}], {}",

                "args":[
                    {
                        "type":"reg",
                        "name":"register a"
                    },
                    {
                        "type":"reg",
                        "name":"register b"
                    },
                    {
                        "type":"adress",
                        "name":"rom adress to jump if condition is satisfiet"
                    }
                ]
            },
            
            "jump less const":{
                "name":"jl",
                "type":"JUMP",
                "subtype":"jump_cond",
                "emulator":"jump_less_const_reg",

                "description":"Jump to adress if value is less to register",
                "example":"jl {}, reg[{}], {}",

                "args":[
                    {
                        "type":"const",
                        "name":"value a"
                    },
                    {
                        "type":"reg",
                        "name":"register b"
                    },
                    {
                        "type":"adress",
                        "name":"rom adress to jump if condition is satisfiet"
                    }
                ]
            },
            "jump less reg":{
                "name":"jl",
                "type":"JUMP",
                "subtype":"jump_cond",
                "emulator":"jump_less_reg_reg",

                "description":"Jump to adress if register is less to other register",
                "example":"jl reg[{}], reg[{}], {}",

                "args":[
                    {
                        "type":"reg",
                        "name":"register a"
                    },
                    {
                        "type":"reg",
                        "name":"register b"
                    },
                    {
                        "type":"adress",
                        "name":"rom adress to jump if condition is satisfiet"
                    }
                ]
            },

            "jump greater const":{
                "name":"jg",
                "type":"JUMP",
                "subtype":"jump_cond",
                "emulator":"jump_greater_const_reg",

                "description":"Jump to adress if value is greater to register",
                "example":"jg {}, reg[{}], {}",

                "args":[
                    {
                        "type":"const",
                        "name":"value a"
                    },
                    {
                        "type":"reg",
                        "name":"register b"
                    },
                    {
                        "type":"adress",
                        "name":"rom adress to jump if condition is satisfiet"
                    }
                ]
            },
            "jump greater reg":{
                "name":"jg",
                "type":"JUMP",
                "subtype":"jump_cond",
                "emulator":"jump_greater_reg_reg",

                "description":"Jump to adress if register is greater to other register",
                "example":"jg reg[{}], reg[{}], {}",

                "args":[
                    {
                        "type":"reg",
                        "name":"register a"
                    },
                    {
                        "type":"reg",
                        "name":"register b"
                    },
                    {
                        "type":"adress",
                        "name":"rom adress to jump if condition is satisfiet"
                    }
                ]
            },
            "jump less equal const":{
                "name":"jl",
                "type":"JUMP",
                "subtype":"jump_cond",
                "emulator":"jump_less_eq_const_reg",

                "description":"Jump to adress if value is less to register",
                "example":"jl {}, reg[{}], {}",

                "args":[
                    {
                        "type":"const",
                        "name":"value a"
                    },
                    {
                        "type":"reg",
                        "name":"register b"
                    },
                    {
                        "type":"adress",
                        "name":"rom adress to jump if condition is satisfiet"
                    }
                ]
            },
            "jump less equal reg":{
                "name":"jle",
                "type":"JUMP",
                "subtype":"jump_cond",
                "emulator":"jump_less_eq_reg_reg",

                "description":"Jump to adress if register is less to other register",
                "example":"jle reg[{}], reg[{}], {}",

                "args":[
                    {
                        "type":"reg",
                        "name":"register a"
                    },
                    {
                        "type":"reg",
                        "name":"register b"
                    },
                    {
                        "type":"adress",
                        "name":"rom adress to jump if condition is satisfiet"
                    }
                ]
            },
            
            "jump greater equal const":{
                "name":"jge",
                "type":"JUMP",
                "subtype":"jump_cond",
                "emulator":"jump_greater_eq_const_reg",

                "description":"Jump to adress if value is greater to register",
                "example":"jg {}, reg[{}], {}",

                "args":[
                    {
                        "type":"const",
                        "name":"value a"
                    },
                    {
                        "type":"reg",
                        "name":"register b"
                    },
                    {
                        "type":"adress",
                        "name":"rom adress to jump if condition is satisfiet"
                    }
                ]
            },
            "jump greater equal reg":{
                "name":"jge",
                "type":"JUMP",
                "subtype":"jump_cond",
                "emulator":"jump_greater_eq_reg_reg",

                "description":"Jump to adress if register is greater to other register",
                "example":"jg reg[{}], reg[{}], {}",

                "args":[
                    {
                        "type":"reg",
                        "name":"register a"
                    },
                    {
                        "type":"reg",
                        "name":"register b"
                    },
                    {
                        "type":"adress",
                        "name":"rom adress to jump if condition is satisfiet"
                    }
                ]
            },

            "jump not equal const":{
                "name":"jne",
                "type":"JUMP",
                "subtype":"jump_cond",
                "emulator":"jump_not_equal_const_reg",

                "description":"Jump to adress if value is not equal to register",
                "example":"jne {}, reg[{}], {}",

                "args":[
                    {
                        "type":"const",
                        "name":"value a"
                    },
                    {
                        "type":"reg",
                        "name":"register b"
                    },
                    {
                        "type":"adress",
                        "name":"rom adress to jump if condition is satisfiet"
                    }
                ]
            },
            "jump not equal reg":{
                "name":"jne",
                "type":"JUMP",
                "subtype":"jump_cond",
                "emulator":"jump_not_equal_reg_reg",

                "description":"Jump to adress if register is not equal to other register",
                "example":"jne reg[{}], reg[{}], {}",

                "args":[
                    {
                        "type":"reg",
                        "name":"register a"
                    },
                    {
                        "type":"reg",
                        "name":"register b"
                    },
                    {
                        "type":"adress",
                        "name":"rom adress to jump if condition is satisfiet"
                    }
                ]
            },

            "jump overflow":{
                "name":"jo",
                "type":"JUMP",
                "subtype":"jump_cond",
                "emulator":"jump_overflow_const_reg",

                "description":"Jump to adress if register is greater to other register",
                "example":"jg",

                "args":[
                   
                ]
            },
            "return":{
                "name":"ret",
                "type":"JUMP",
                "subtype":"jump_cond",
                "emulator":"ret",

                "description":"Jump to adress if register is greater to other register",
                "example":"ret",

                "args":[
                   
                ]
            },
            "interupt":{
                "name":"int",
                "type":"JUMP",
                "subtype":"jump_cond",
                "emulator":"interutp",

                "description":"Jump to adress if register is greater to other register",
                "example":"int {}",

                "args":[
                    {
                        "type":"const",
                        "name":"a"
                    }
                ]
            }


        },
        "PATTERNS":[
            {},
            {}
        ]
    }
}