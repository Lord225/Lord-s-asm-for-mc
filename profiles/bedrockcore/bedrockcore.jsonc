{
    "CPU":
    {
        "Name": "BedrockCore",
        "Arch": "Bedrock",
        "Author": "Kazik24",
        "emulator":null, // "example_emulator"
        "time_per_cycle":1,
        
        "ARGUMENTS":{
            "variants":{
                "op": {
                    "b": {
                        "size": 4
                    },
                    "a": {
                        "size": 4 
                    },
                    "r": {
                        "size": 4
                    },
                    "cu": {
                        "size": 4
                    }
                },
                "word": {
                    "value": {
                        "size": 16
                    }
                }
            }
        },
        "ADRESSING":
        {
            "mode":"packed", // packed, align 
            "bin_len":16,
            "offset":0
        },

        "DEFINES":[
        ],

        "KEYWORDS":{
            "ENTRY":{
                "offset":1,
                "write":0
            }
        },

        // "SCHEMATIC":
        // {
        //     "blank":"blank.schem",           // Name of blank schematic
        //     "high":"minecraft:lapis_block",  
        //     "low":"minecraft:redstone_block",
        //     "layout": null
        // },

        "FILL":"nop",

        // Command list
        "COMMANDS":{
            "nop":{
                "pattern":"nop",
                "command_layout": "op",
                "bin":{
                }
            },
            "or":{
                "pattern":"or {r:token}, {a:token}, {b:token}",
                "command_layout": "op",
                "bin":{
                    "cu": 0,
                    "r": "int(r[1:])",
                    "a": "int(a[1:])",
                    "b": "int(b[1:])"
                }
            },
            "and": {
                "pattern":"and {r:token}, {a:token}, {b:token}",
                "command_layout": "op",
                "bin":{
                    "cu": 1,
                    "r": "int(r[1:])",
                    "a": "int(a[1:])",
                    "b": "int(b[1:])"
                }
            },
            "xor": {
                "pattern":"xor {r:token}, {a:token}, {b:token}",
                "command_layout": "op",
                "bin":{
                    "cu": 2,
                    "r": "int(r[1:])",
                    "a": "int(a[1:])",
                    "b": "int(b[1:])"
                }
            },
            "ads": {
                "pattern":"add {r:token}, {a:token}, {b:num}",
                "command_layout": "op",
                "bin":{
                    "cu": 3,
                    "r": "int(r[1:])",
                    "a": "int(a[1:])",
                    "b": "b if b < 8 else None"
                }
            },
            "add": {
                "pattern":"add {r:token}, {a:token}, {b:token}",
                "command_layout": "op",
                "bin":{
                    "cu": 4,
                    "r": "int(r[1:])",
                    "a": "int(a[1:])",
                    "b": "int(b[1:])"
                }
            },
            "subconst": {
                "pattern":"sub {r:token}, {a:token}, {b:num}",
                "command_layout": "op",
                "bin":{
                    "cu": 3,
                    "r": "int(r[1:])",
                    "a": "int(a[1:])",
                    "b": "-b if b < 9 else None"
                }
            },
            "sub": {
                "pattern":"sub {r:token}, {a:token}, {b:token}",
                "command_layout": "op",
                "bin":{
                    "cu": 5,
                    "r": "int(r[1:])",
                    "a": "int(a[1:])",
                    "b": "int(b[1:])"
                }
            },
            "lt": {
                "pattern":"lt {r:token}, {a:token}, {b:token}",
                "command_layout": "op",
                "bin":{
                    "cu": 6,
                    "r": "int(r[1:])",
                    "a": "int(a[1:])",
                    "b": "int(b[1:])"
                }
            },
            "ge": {
                "pattern":"ge {r:token}, {a:token}, {b:token}",
                "command_layout": "op",
                "bin":{
                    "cu": 7,
                    "r": "int(r[1:])",
                    "a": "int(a[1:])",
                    "b": "int(b[1:])"
                }
            },
            "lts": {
                "pattern":"lts {r:token}, {a:token}, {b:token}",
                "command_layout": "op",
                "bin":{
                    "cu": 8,
                    "r": "int(r[1:])",
                    "a": "int(a[1:])",
                    "b": "int(b[1:])"
                }
            },
            "ges": {
                "pattern":"ges {r:token}, {a:token}, {b:token}",
                "command_layout": "op",
                "bin":{
                    "cu": 9,
                    "r": "int(r[1:])",
                    "a": "int(a[1:])",
                    "b": "int(b[1:])"
                }
            },
            "eq": {
                "pattern":"eq {r:token}, {a:token}, {b:token}",
                "command_layout": "op",
                "bin":{
                    "cu": 10,
                    "r": "int(r[1:])",
                    "a": "int(a[1:])",
                    "b": "int(b[1:])"
                }
            },
            "ne": {
                "pattern":"ne {r:token}, {a:token}, {b:token}",
                "command_layout": "op",
                "bin":{
                    "cu": 11,
                    "r": "int(r[1:])",
                    "a": "int(a[1:])",
                    "b": "int(b[1:])"
                }
            },
            "movw": {
                "pattern":"movw {r:token}, {a:token}, {b:token}",
                "command_layout": "op",
                "bin":{
                    "cu": 12,
                    "r": "int(r[1:])",
                    "a": "int(a[1:])",
                    "b": "int(b[1:])"
                }
            },
            "cmov": {
                "pattern":"cmov {r:token}, {a:token}, {b:token}",
                "command_layout": "op",
                "bin":{
                    "cu": 13,
                    "r": "int(r[1:])",
                    "a": "int(a[1:])",
                    "b": "int(b[1:])"
                }
            },
            "halt": {
                "pattern":"halt",
                "command_layout": "op",
                "bin":{
                    "b": 15,
                    "a": 15,
                    "r": 0,
                    "cu": 1
                }
            },
            "kill": {
                "pattern":"kill",
                "command_layout": "op",
                "bin":{
                    "b": 15,
                    "a": 14,
                    "r": 0,
                    "cu": 2
                }
            },
            "rst": {
                "pattern":"rst",
                "command_layout": "op",
                "bin":{
                    "b": 15,
                    "a": 13,
                    "r": 0,
                    "cu": 3
                }
            },

            "shr": {
                "pattern":"shr {r:token}, {a:token}",
                "command_layout": "op",
                "bin":{
                    "b": 0,
                    "a": "int(a[1:])",
                    "r": "int(r[1:])",
                    "cu": 15
                }
            },
            "ashr": {
                "pattern":"ashr {r:token}, {a:token}",
                "command_layout": "op",
                "bin":{
                    "b": 1,
                    "a": "int(a[1:])",
                    "r": "int(r[1:])",
                    "cu": 15
                }
            },
            "lsh": {
                "pattern":"shr {r:token}, {a:token}",
                "command_layout": "op",
                "bin":{
                    "b": 2,
                    "a": "int(a[1:])",
                    "r": "int(r[1:])",
                    "cu": 15
                }
            },
            "dw": {
                "pattern":"dw {w:num}",
                "command_layout": "word",
                "bin":{
                    "value":"w"
                }
            },
            "cldi cmd": {
                "pattern":"cldi cmd {r:token}, {a:token}",
                "command_layout": "op",
                "bin":{
                    "b": 3,
                    "a": "int(a[1:])",
                    "r": "int(r[1:])",
                    "cu": 15
                } 
            },
            "sethlz": {
                "pattern":"sethlz {r:token}, {a:token}",
                "command_layout": "op",
                "bin":{
                    "b": 4,
                    "a": "int(a[1:])",
                    "r": "int(r[1:])",
                    "cu": 15
                } 
            },
            "sethls": {
                "pattern":"sethls {r:token}, {a:token}",
                "command_layout": "op",
                "bin":{
                    "b": 5,
                    "a": "int(a[1:])",
                    "r": "int(r[1:])",
                    "cu": 15
                } 
            },
            "setllz": {
                "pattern":"setllz {r:token}, {a:token}",
                "command_layout": "op",
                "bin":{
                    "b": 6,
                    "a": "int(a[1:])",
                    "r": "int(r[1:])",
                    "cu": 15
                } 
            },
            "setlls": {
                "pattern":"setlls {r:token}, {a:token}",
                "command_layout": "op",
                "bin":{
                    "b": 7,
                    "a": "int(a[1:])",
                    "r": "int(r[1:])",
                    "cu": 15
                } 
            }
        },
        // Macro list
        "MACROS":{
            "gt":{
                "pattern": "gt {r:token}, {a:token}, {b:token}",
                "process": {

                },
                "expansion":[
                    "lt {r}, {b}, {a}"
                ]
            },
            "le": {
                "pattern": "le {r:token}, {a:token}, {b:token}",
                "process": {

                },
                "expansion":[
                    "ge {r}, {b}, {a}"
                ]
            },
            "gts":{
                "pattern": "gts {r:token}, {a:token}, {b:token}",
                "process": {

                },
                "expansion":[
                    "lt {r}, {b}, {a}"
                ]
            },
            "les": {
                "pattern": "les {r:token}, {a:token}, {b:token}",
                "process": {

                },
                "expansion":[
                    "ges {r}, {b}, {a}"
                ]
            },
            "SETHLZ SETLLZ": {
                "pattern":"mov {r:token}, {b:token}",
                "process": {
                    "case": "'H' if (b.endswith('H') or b.endswith('h')) else 'L' if (b.endswith('L') or b.endswith('l')) else None",
                    "b_process": "b.strip('H').strip('L').strip('h').strip('l')",
                    "expansion": "f'sethlz {r}, {b_process}' if case=='L' else (f'setllz {r}, {b_process}' if case=='H' else f'mov {r}, {b_process}')"
                },  
                "expansion":[
                    "{expansion}"
                ]
            },

            "SETHLS SETLLS": {
                "pattern":"movs {r:token}, {b:token}",
                "process": {
                    "case": "'H' if (b.endswith('H') or b.endswith('h')) else 'L' if (b.endswith('L') or b.endswith('l')) else None",
                    "b_process": "b.strip('H').strip('L').strip('h').strip('l')",
                    "expansion": "f'sethls {r}, {b_process}' if case=='L' else (f'setlls {r}, {b_process}' if case=='H' else f'mov {r}, {b_process}')"
                },  
                "expansion":[
                    "{expansion}"
                ]
            },

            "mov": {
                "pattern": "mov {r:token}, {a:token}",
                "process": {

                },
                "expansion":[
                    "or {r}, {a}, r0"
                ]
            },
            "mov read": {
                "pattern": "mov {r:token}, [{a:token}]",
                "process": {

                },
                "expansion":[
                    "movw {r}, {a}, r0"
                ]
            },
            "mov write": {
                "pattern": "mov [{a:token}], {b:token}",
                "process": {

                },
                "expansion":[
                    "movw r0, {a}, {b}"
                ]
            },
            "cldi": {
                "pattern":"cldi {r:token}, {b:token}, {cond:token}",
                "process": {

                },
                "expansion":[
                    "cldi cmd {r}, {cond}",
                    "dw {b}"
                ]
            }
            
            
        }
    }
}